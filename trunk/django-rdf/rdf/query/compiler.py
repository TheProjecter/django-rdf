"""
Query compiler facade.

Instantiates a ply lexer and parser to generate an abstract syntax tree, 
consisting of collections of namespaces, variables, predicates and constraints. 

The elements of the AST are bound to ontology elements in a separate resolver 
stage before code is generated by the compiler backend.

The resolver also maps generic concepts and predicates to the correct database 
tables. This provides support for querying resources, statements and literals 
that are stored in the RDF models. The resolver achieves this by converting 
RDQL constraints about generic concepts and predicates into equivalent constraints 
about concepts and predicates that are mapped to specific tables. Generally, this 
comes down to replacing a normal constraint with three constraints using the 
built-in rdf:subject, rdf:predicate and rdf:object predicates. Most of the compiler
complexity is a result of this conversion. 
"""

from generate import generate
from resolve import resolve


class Compiler(object):

    def __init__(self):
        self.ast, self.errors = None, []

    def compile(self, rdql):
        from lex import Lexer
        from yacc import Parser
        self.ast = Parser().parse(rdql, lexer=Lexer())
        self.ast = resolve(self.ast) 
        select, count, self.ast = generate(self.ast)
        return select, count
    
    def __getconcepts(self):
        return [c.binding for c in self.ast.concepts]
    concepts = property(__getconcepts)
    
    def __getpredicates(self):
        return [p.binding for p in self.ast.predicates]
    predicates = property(__getpredicates)
    
    def __getmangledpredicates(self):
        return [p.binding.mangled for p in self.ast.predicates]
    mangled_predicates = property(__getmangledpredicates)
    


# Copyright (c) 2008, Stefan B Sigurdsson
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without modification,
# are permitted provided that the following conditions are met:
# 
#     1. Redistributions of source code must retain the above copyright notice, 
#        this list of conditions and the following disclaimer.
#     
#     2. Redistributions in binary form must reproduce the above copyright 
#        notice, this list of conditions and the following disclaimer in the
#        documentation and/or other materials provided with the distribution.
# 
#     3. Neither the name of Django nor the names of its contributors may be used
#        to endorse or promote products derived from this software without
#        specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
